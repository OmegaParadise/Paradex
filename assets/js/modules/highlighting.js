/* assets/js/modules/highlighting.js (V6.19m) */
// console.log("JS: highlighting.js loaded.");

if (!window.OMEGADEX_APP) window.OMEGADEX_APP = {};

OMEGADEX_APP.highlightTextInNode = (node, term) => { /* ... full implementation from V6.19 app.js ... */ };
OMEGADEX_APP.clearSearchTermHighlighting = () => { /* ... full implementation from V6.19 app.js ... */ };
OMEGADEX_APP.applySearchTermHighlighting = () => { /* ... full implementation from V6.19 app.js ... */ };
// (Pasting full implementations)
OMEGADEX_APP.highlightTextInNode = (node, term) => { if (!term || term.trim().length === 0 || !node) return; const termRegex = new RegExp(`(${OMEGADEX_APP.escapeRegExp(term.trim())})`, 'gi'); const walker = document.createTreeWalker(node, NodeFilter.SHOW_TEXT, null, false); let textNode; const nodesToProcess = []; while (textNode = walker.nextNode()) { if (textNode.parentElement.tagName === 'SCRIPT' || textNode.parentElement.tagName === 'STYLE' || textNode.parentElement.tagName === 'TEXTAREA' || textNode.parentElement.closest('mark.search-highlight')) { continue; } nodesToProcess.push(textNode); } nodesToProcess.forEach(currentTextNode => { const text = currentTextNode.nodeValue; if (termRegex.test(text)) { const fragment = document.createDocumentFragment(); let lastIndex = 0; text.replace(termRegex, (match, _p1, offset) => { if (offset > lastIndex) fragment.appendChild(document.createTextNode(text.substring(lastIndex, offset))); const mark = document.createElement('mark'); mark.className = 'search-highlight'; mark.textContent = match; fragment.appendChild(mark); lastIndex = offset + match.length; }); if (lastIndex < text.length) fragment.appendChild(document.createTextNode(text.substring(lastIndex))); if (fragment.childNodes.length > 0) currentTextNode.parentNode.replaceChild(fragment, currentTextNode); } }); };
OMEGADEX_APP.clearSearchTermHighlighting = () => { if (!OMEGADEX_APP.contentElem) return; const highlights = OMEGADEX_APP.contentElem.querySelectorAll('mark.search-highlight'); if (highlights.length === 0) return; if (OMEGADEX_APP.contentObserverInstance) OMEGADEX_APP.contentObserverInstance.disconnect(); highlights.forEach(mark => { const parent = mark.parentNode; if (parent) { parent.replaceChild(document.createTextNode(mark.textContent), mark); parent.normalize(); } }); if (OMEGADEX_APP.contentObserverInstance && OMEGADEX_APP.contentElem) { OMEGADEX_APP.contentObserverInstance.takeRecords(); OMEGADEX_APP.contentObserverInstance.observe(OMEGADEX_APP.contentElem, { childList: true, subtree: true }); } };
OMEGADEX_APP.applySearchTermHighlighting = () => { if (OMEGADEX_APP.isHighlighting || !OMEGADEX_APP.contentElem) return; OMEGADEX_APP.isHighlighting = true; const urlParamsHighlight = new URLSearchParams(window.location.search); const highlightTerm = urlParamsHighlight.get('highlight'); if (highlightTerm) { OMEGADEX_APP.clearSearchTermHighlighting(); if (OMEGADEX_APP.contentObserverInstance) OMEGADEX_APP.contentObserverInstance.disconnect(); OMEGADEX_APP.highlightTextInNode(OMEGADEX_APP.contentElem, highlightTerm); if (OMEGADEX_APP.contentObserverInstance && OMEGADEX_APP.contentElem) { OMEGADEX_APP.contentObserverInstance.takeRecords(); OMEGADEX_APP.contentObserverInstance.observe(OMEGADEX_APP.contentElem, { childList: true, subtree: true }); } } OMEGADEX_APP.isHighlighting = false; };